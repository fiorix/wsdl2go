package memoryservice

import (
	"github.com/fiorix/wsdl2go/soap"
)

// Namespace was auto-generated from WSDL.
var Namespace = "http://localhost:8080/MemoryService.wsdl"

// NewMemoryServicePortType creates an initializes a MemoryServicePortType.
func NewMemoryServicePortType(cli *soap.Client) MemoryServicePortType {
	return &memoryServicePortType{cli}
}

// MemoryServicePortType was auto-generated from WSDL
// and defines interface for the remote service. Useful for testing.
type MemoryServicePortType interface {
	// Get was auto-generated from WSDL.
	Get(key string) (*GetResponse, error)

	// GetMulti was auto-generated from WSDL.
	GetMulti(keys *GetMultiRequest) (*GetMultiResponse, error)

	// Set was auto-generated from WSDL.
	Set(info *SetRequest) (bool, error)
}

// Duration in WSDL format.
type Duration string

// GetMultiResponse was auto-generated from WSDL.
type GetMultiResponse struct {
	Values []*GetResponse `xml:"Values,omitempty" json:"Values,omitempty" yaml:"Values,omitempty"`
}

// GetResponse carries value and TTL.
type GetResponse struct {
	Value *string   `xml:"Value,omitempty" json:"Value,omitempty" yaml:"Value,omitempty"`
	TTL   *Duration `xml:"TTL,omitempty" json:"TTL,omitempty" yaml:"TTL,omitempty"`
}

// SetRequest carries a key-value pair.
type SetRequest struct {
	Key        string    `xml:"Key" json:"Key" yaml:"Key"`
	Value      string    `xml:"Value" json:"Value" yaml:"Value"`
	Expiration *Duration `xml:"Expiration,omitempty" json:"Expiration,omitempty" yaml:"Expiration,omitempty"`
}

// GetMultiRequest was auto-generated from WSDL.
type GetMultiRequest struct {
	Keys []string `xml:"Keys" json:"Keys" yaml:"Keys"`
}

// Operation wrapper for Get.
// OperationGetRequest was auto-generated from WSDL.
type OperationGetRequest struct {
	Key *string `xml:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty"`
}

// Operation wrapper for Get.
// OperationGetResponse was auto-generated from WSDL.
type OperationGetResponse struct {
	Resp *GetResponse `xml:"resp,omitempty" json:"resp,omitempty" yaml:"resp,omitempty"`
}

// Operation wrapper for GetMulti.
// OperationGetMultiRequest was auto-generated from WSDL.
type OperationGetMultiRequest struct {
	Keys *GetMultiRequest `xml:"keys,omitempty" json:"keys,omitempty" yaml:"keys,omitempty"`
}

// Operation wrapper for GetMulti.
// OperationGetMultiResponse was auto-generated from WSDL.
type OperationGetMultiResponse struct {
	Values *GetMultiResponse `xml:"values,omitempty" json:"values,omitempty" yaml:"values,omitempty"`
}

// Operation wrapper for Set.
// OperationSetRequest was auto-generated from WSDL.
type OperationSetRequest struct {
	Info *SetRequest `xml:"info,omitempty" json:"info,omitempty" yaml:"info,omitempty"`
}

// Operation wrapper for Set.
// OperationSetResponse was auto-generated from WSDL.
type OperationSetResponse struct {
	Ok *bool `xml:"ok,omitempty" json:"ok,omitempty" yaml:"ok,omitempty"`
}

// memoryServicePortType implements the MemoryServicePortType interface.
type memoryServicePortType struct {
	cli *soap.Client
}

// Get was auto-generated from WSDL.
func (p *memoryServicePortType) Get(key string) (*GetResponse, error) {
	α := struct {
		M OperationGetRequest `xml:"tns:Get"`
	}{
		OperationGetRequest{
			&key,
		},
	}

	γ := struct {
		M OperationGetResponse `xml:"GetResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("Get", α, &γ); err != nil {
		return nil, err
	}
	return γ.M.Resp, nil
}

// GetMulti was auto-generated from WSDL.
func (p *memoryServicePortType) GetMulti(keys *GetMultiRequest) (*GetMultiResponse, error) {
	α := struct {
		M OperationGetMultiRequest `xml:"tns:GetMulti"`
	}{
		OperationGetMultiRequest{
			keys,
		},
	}

	γ := struct {
		M OperationGetMultiResponse `xml:"GetMultiResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("GetMulti", α, &γ); err != nil {
		return nil, err
	}
	return γ.M.Values, nil
}

// Set was auto-generated from WSDL.
func (p *memoryServicePortType) Set(info *SetRequest) (bool, error) {
	α := struct {
		M OperationSetRequest `xml:"tns:Set"`
	}{
		OperationSetRequest{
			info,
		},
	}

	γ := struct {
		M OperationSetResponse `xml:"SetResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("Set", α, &γ); err != nil {
		return false, err
	}
	return *γ.M.Ok, nil
}
